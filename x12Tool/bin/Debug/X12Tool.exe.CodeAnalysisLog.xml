<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="c:\program files (x86)\microsoft fxcop 10.0\Xml\FxCopReport.xsl"?>
<FxCopReport Version="10.0">
 <Namespaces>
  <Namespace Name="x12Tool">
   <Messages>
    <Message Id="x" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2018-08-15 14:21:23Z" FixCategory="Breaking">
     <Issue Name="Namespace" Certainty="85" Level="Error">Correct the casing of 'x' in namespace name 'x12Tool' by changing it to 'X'.</Issue>
    </Message>
   </Messages>
  </Namespace>
 </Namespaces>
 <Targets>
  <Target Name="C:\Users\dcv3016\Documents\Visual Studio 2012\Projects\EDIReader\x12_template\bin\Debug\X12Tool.exe">
   <Modules>
    <Module Name="x12tool.exe">
     <Messages>
      <Message TypeName="AssembliesShouldHaveValidStrongNames" Category="Microsoft.Design" CheckId="CA2210" Status="Active" Created="2018-08-15 14:21:23Z" FixCategory="NonBreaking">
       <Issue Name="NoStrongName" Certainty="95" Level="CriticalError">Sign 'X12Tool.exe' with a strong name key.</Issue>
      </Message>
      <Message TypeName="MarkAssembliesWithClsCompliant" Category="Microsoft.Design" CheckId="CA1014" Status="Active" Created="2018-08-15 14:21:23Z" FixCategory="NonBreaking">
       <Issue Certainty="95" Level="Error">Mark 'X12Tool.exe' with CLSCompliant(true) because it exposes externally visible types.</Issue>
      </Message>
      <Message TypeName="MarkAssembliesWithNeutralResourcesLanguage" Category="Microsoft.Performance" CheckId="CA1824" Status="Active" Created="2018-08-15 14:21:23Z" FixCategory="NonBreaking">
       <Issue Certainty="95" Level="Warning">Because assembly 'X12Tool.exe' contains a ResX-based resource file, mark it with the NeutralResourcesLanguage attribute, specifying the language of the resources within the assembly. This could improve lookup performance the first time a resource is retrieved.</Issue>
      </Message>
     </Messages>
     <Namespaces>
      <Namespace Name="x12Tool">
       <Types>
        <Type Name="_gen_func" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="func" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2018-08-15 14:21:23Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="85" Level="Error">Correct the casing of 'func' in type name '_gen_func' by changing it to 'Func'.</Issue>
          </Message>
          <Message Id="gen" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2018-08-15 14:21:23Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="85" Level="Error">Correct the casing of 'gen' in type name '_gen_func' by changing it to 'Gen'.</Issue>
          </Message>
          <Message TypeName="IdentifiersShouldNotContainUnderscores" Category="Microsoft.Naming" CheckId="CA1707" Status="Active" Created="2018-08-15 14:21:23Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="95" Level="Error">Remove the underscores from type name '_gen_func'.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#checklistbox_all_checked_state(System.Windows.Forms.CheckedListBox,System.Boolean)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="all" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2018-08-15 14:21:23Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error" Path="c:\Users\dcv3016\Documents\Visual Studio 2012\Projects\EDIReader\x12_template\Classes" File="_gen_func.cs" Line="57">Correct the casing of 'all' in member name '_gen_func.checklistbox_all_checked_state(CheckedListBox, bool)' by changing it to 'All'.</Issue>
            </Message>
            <Message Id="box" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2018-08-15 14:21:23Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="c:\Users\dcv3016\Documents\Visual Studio 2012\Projects\EDIReader\x12_template\Classes" File="_gen_func.cs" Line="57">In member '_gen_func.checklistbox_all_checked_state(CheckedListBox, bool)', correct the casing of 'box' in parameter name 'checked_list_box' by changing it to 'Box'.</Issue>
            </Message>
            <Message Id="checked" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2018-08-15 14:21:23Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error" Path="c:\Users\dcv3016\Documents\Visual Studio 2012\Projects\EDIReader\x12_template\Classes" File="_gen_func.cs" Line="57">Correct the casing of 'checked' in member name '_gen_func.checklistbox_all_checked_state(CheckedListBox, bool)' by changing it to 'Checked'.</Issue>
            </Message>
            <Message Id="checklistbox" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2018-08-15 14:21:23Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error" Path="c:\Users\dcv3016\Documents\Visual Studio 2012\Projects\EDIReader\x12_template\Classes" File="_gen_func.cs" Line="57">Correct the casing of 'checklistbox' in member name '_gen_func.checklistbox_all_checked_state(CheckedListBox, bool)' by changing it to 'Checklistbox'.</Issue>
            </Message>
            <Message Id="list" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2018-08-15 14:21:23Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="c:\Users\dcv3016\Documents\Visual Studio 2012\Projects\EDIReader\x12_template\Classes" File="_gen_func.cs" Line="57">In member '_gen_func.checklistbox_all_checked_state(CheckedListBox, bool)', correct the casing of 'list' in parameter name 'checked_list_box' by changing it to 'List'.</Issue>
            </Message>
            <Message Id="state" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2018-08-15 14:21:23Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error" Path="c:\Users\dcv3016\Documents\Visual Studio 2012\Projects\EDIReader\x12_template\Classes" File="_gen_func.cs" Line="57">Correct the casing of 'state' in member name '_gen_func.checklistbox_all_checked_state(CheckedListBox, bool)' by changing it to 'State'.</Issue>
            </Message>
            <Message Id="checklistbox" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2018-08-15 14:21:23Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning" Path="c:\Users\dcv3016\Documents\Visual Studio 2012\Projects\EDIReader\x12_template\Classes" File="_gen_func.cs" Line="57">Correct the spelling of 'checklistbox' in member name '_gen_func.checklistbox_all_checked_state(CheckedListBox, bool)' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message TypeName="IdentifiersShouldNotContainUnderscores" Category="Microsoft.Naming" CheckId="CA1707" Status="Active" Created="2018-08-15 14:21:23Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="95" Level="Error" Path="c:\Users\dcv3016\Documents\Visual Studio 2012\Projects\EDIReader\x12_template\Classes" File="_gen_func.cs" Line="57">Remove the underscores from member name '_gen_func.checklistbox_all_checked_state(CheckedListBox, bool)'.</Issue>
             <Issue Name="MemberParameter" Certainty="95" Level="Error" Path="c:\Users\dcv3016\Documents\Visual Studio 2012\Projects\EDIReader\x12_template\Classes" File="_gen_func.cs" Line="57">In member '_gen_func.checklistbox_all_checked_state(CheckedListBox, bool)', remove the underscores from parameter name 'checked_list_box'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#colorize_list_view(System.Windows.Forms.ListView,x12Tool.Config)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="colorize" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2018-08-15 14:21:23Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error" Path="c:\Users\dcv3016\Documents\Visual Studio 2012\Projects\EDIReader\x12_template\Classes" File="_gen_func.cs" Line="63">Correct the casing of 'colorize' in member name '_gen_func.colorize_list_view(ListView, Config)' by changing it to 'Colorize'.</Issue>
            </Message>
            <Message Id="list" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2018-08-15 14:21:23Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error" Path="c:\Users\dcv3016\Documents\Visual Studio 2012\Projects\EDIReader\x12_template\Classes" File="_gen_func.cs" Line="63">Correct the casing of 'list' in member name '_gen_func.colorize_list_view(ListView, Config)' by changing it to 'List'.</Issue>
            </Message>
            <Message Id="view" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2018-08-15 14:21:23Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error" Path="c:\Users\dcv3016\Documents\Visual Studio 2012\Projects\EDIReader\x12_template\Classes" File="_gen_func.cs" Line="63">Correct the casing of 'view' in member name '_gen_func.colorize_list_view(ListView, Config)' by changing it to 'View'.</Issue>
            </Message>
            <Message Id="c" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2018-08-15 14:21:23Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning" Path="c:\Users\dcv3016\Documents\Visual Studio 2012\Projects\EDIReader\x12_template\Classes" File="_gen_func.cs" Line="63">In method '_gen_func.colorize_list_view(ListView, Config)', consider providing a more meaningful name than parameter name 'c'.</Issue>
            </Message>
            <Message TypeName="IdentifiersShouldNotContainUnderscores" Category="Microsoft.Naming" CheckId="CA1707" Status="Active" Created="2018-08-15 14:21:23Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="95" Level="Error" Path="c:\Users\dcv3016\Documents\Visual Studio 2012\Projects\EDIReader\x12_template\Classes" File="_gen_func.cs" Line="63">Remove the underscores from member name '_gen_func.colorize_list_view(ListView, Config)'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ensure_directory_structure(System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="directory" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2018-08-15 14:21:23Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error" Path="c:\Users\dcv3016\Documents\Visual Studio 2012\Projects\EDIReader\x12_template\Classes" File="_gen_func.cs" Line="103">Correct the casing of 'directory' in member name '_gen_func.ensure_directory_structure(string)' by changing it to 'Directory'.</Issue>
            </Message>
            <Message Id="ensure" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2018-08-15 14:21:23Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error" Path="c:\Users\dcv3016\Documents\Visual Studio 2012\Projects\EDIReader\x12_template\Classes" File="_gen_func.cs" Line="103">Correct the casing of 'ensure' in member name '_gen_func.ensure_directory_structure(string)' by changing it to 'Ensure'.</Issue>
            </Message>
            <Message Id="structure" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2018-08-15 14:21:23Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error" Path="c:\Users\dcv3016\Documents\Visual Studio 2012\Projects\EDIReader\x12_template\Classes" File="_gen_func.cs" Line="103">Correct the casing of 'structure' in member name '_gen_func.ensure_directory_structure(string)' by changing it to 'Structure'.</Issue>
            </Message>
            <Message TypeName="IdentifiersShouldNotContainUnderscores" Category="Microsoft.Naming" CheckId="CA1707" Status="Active" Created="2018-08-15 14:21:23Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="95" Level="Error" Path="c:\Users\dcv3016\Documents\Visual Studio 2012\Projects\EDIReader\x12_template\Classes" File="_gen_func.cs" Line="103">Remove the underscores from member name '_gen_func.ensure_directory_structure(string)'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#get_save_path(System.String,System.String,System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Default" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2018-08-15 14:21:23Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="c:\Users\dcv3016\Documents\Visual Studio 2012\Projects\EDIReader\x12_template\Classes" File="_gen_func.cs" Line="107">In member '_gen_func.get_save_path(string, string, string)', correct the casing of 'Default' in parameter name 'Default_FileName' by changing it to 'default'.</Issue>
            </Message>
            <Message Id="directory" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2018-08-15 14:21:23Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="c:\Users\dcv3016\Documents\Visual Studio 2012\Projects\EDIReader\x12_template\Classes" File="_gen_func.cs" Line="107">In member '_gen_func.get_save_path(string, string, string)', correct the casing of 'directory' in parameter name 'initial_directory' by changing it to 'Directory'.</Issue>
            </Message>
            <Message Id="get" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2018-08-15 14:21:23Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error" Path="c:\Users\dcv3016\Documents\Visual Studio 2012\Projects\EDIReader\x12_template\Classes" File="_gen_func.cs" Line="107">Correct the casing of 'get' in member name '_gen_func.get_save_path(string, string, string)' by changing it to 'Get'.</Issue>
            </Message>
            <Message Id="path" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2018-08-15 14:21:23Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error" Path="c:\Users\dcv3016\Documents\Visual Studio 2012\Projects\EDIReader\x12_template\Classes" File="_gen_func.cs" Line="107">Correct the casing of 'path' in member name '_gen_func.get_save_path(string, string, string)' by changing it to 'Path'.</Issue>
            </Message>
            <Message Id="save" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2018-08-15 14:21:23Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error" Path="c:\Users\dcv3016\Documents\Visual Studio 2012\Projects\EDIReader\x12_template\Classes" File="_gen_func.cs" Line="107">Correct the casing of 'save' in member name '_gen_func.get_save_path(string, string, string)' by changing it to 'Save'.</Issue>
            </Message>
            <Message TypeName="IdentifiersShouldNotContainUnderscores" Category="Microsoft.Naming" CheckId="CA1707" Status="Active" Created="2018-08-15 14:21:23Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="95" Level="Error" Path="c:\Users\dcv3016\Documents\Visual Studio 2012\Projects\EDIReader\x12_template\Classes" File="_gen_func.cs" Line="107">Remove the underscores from member name '_gen_func.get_save_path(string, string, string)'.</Issue>
             <Issue Name="MemberParameter" Certainty="95" Level="Error" Path="c:\Users\dcv3016\Documents\Visual Studio 2012\Projects\EDIReader\x12_template\Classes" File="_gen_func.cs" Line="107">In member '_gen_func.get_save_path(string, string, string)', remove the underscores from parameter name 'Default_FileName'.</Issue>
             <Issue Name="MemberParameter" Certainty="95" Level="Error" Path="c:\Users\dcv3016\Documents\Visual Studio 2012\Projects\EDIReader\x12_template\Classes" File="_gen_func.cs" Line="107">In member '_gen_func.get_save_path(string, string, string)', remove the underscores from parameter name 'initial_directory'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#get_tab_by_name(System.String,System.Windows.Forms.TabControl)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="tabby" TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702" Status="Active" Created="2018-08-15 14:21:23Z" FixCategory="Breaking">
             <Issue Name="MemberShouldBeDiscreteTerm" Certainty="80" Level="Error" Path="c:\Users\dcv3016\Documents\Visual Studio 2012\Projects\EDIReader\x12_template\Classes" File="_gen_func.cs" Line="48">The compound word 'tabby' in member name '_gen_func.get_tab_by_name(string, TabControl)' exists as a discrete term. If your usage is intended to be single word, case it as 'tabby' or strip the first token entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="Name" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2018-08-15 14:21:23Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="c:\Users\dcv3016\Documents\Visual Studio 2012\Projects\EDIReader\x12_template\Classes" File="_gen_func.cs" Line="48">In member '_gen_func.get_tab_by_name(string, TabControl)', correct the casing of 'Name' in parameter name 'Name' by changing it to 'name'.</Issue>
            </Message>
            <Message Id="Tab" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2018-08-15 14:21:23Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="c:\Users\dcv3016\Documents\Visual Studio 2012\Projects\EDIReader\x12_template\Classes" File="_gen_func.cs" Line="48">In member '_gen_func.get_tab_by_name(string, TabControl)', correct the casing of 'Tab' in parameter name 'TabControl' by changing it to 'tab'.</Issue>
            </Message>
            <Message Id="by" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2018-08-15 14:21:23Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error" Path="c:\Users\dcv3016\Documents\Visual Studio 2012\Projects\EDIReader\x12_template\Classes" File="_gen_func.cs" Line="48">Correct the casing of 'by' in member name '_gen_func.get_tab_by_name(string, TabControl)' by changing it to 'By'.</Issue>
            </Message>
            <Message Id="get" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2018-08-15 14:21:23Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error" Path="c:\Users\dcv3016\Documents\Visual Studio 2012\Projects\EDIReader\x12_template\Classes" File="_gen_func.cs" Line="48">Correct the casing of 'get' in member name '_gen_func.get_tab_by_name(string, TabControl)' by changing it to 'Get'.</Issue>
            </Message>
            <Message Id="name" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2018-08-15 14:21:23Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error" Path="c:\Users\dcv3016\Documents\Visual Studio 2012\Projects\EDIReader\x12_template\Classes" File="_gen_func.cs" Line="48">Correct the casing of 'name' in member name '_gen_func.get_tab_by_name(string, TabControl)' by changing it to 'Name'.</Issue>
            </Message>
            <Message Id="tab" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2018-08-15 14:21:23Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error" Path="c:\Users\dcv3016\Documents\Visual Studio 2012\Projects\EDIReader\x12_template\Classes" File="_gen_func.cs" Line="48">Correct the casing of 'tab' in member name '_gen_func.get_tab_by_name(string, TabControl)' by changing it to 'Tab'.</Issue>
            </Message>
            <Message TypeName="IdentifiersShouldNotContainUnderscores" Category="Microsoft.Naming" CheckId="CA1707" Status="Active" Created="2018-08-15 14:21:23Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="95" Level="Error" Path="c:\Users\dcv3016\Documents\Visual Studio 2012\Projects\EDIReader\x12_template\Classes" File="_gen_func.cs" Line="48">Remove the underscores from member name '_gen_func.get_tab_by_name(string, TabControl)'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#recursive_reset(System.Windows.Forms.Control)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="control" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2018-08-15 14:21:23Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="c:\Users\dcv3016\Documents\Visual Studio 2012\Projects\EDIReader\x12_template\Classes" File="_gen_func.cs" Line="119">In member '_gen_func.recursive_reset(Control)', correct the casing of 'control' in parameter name 'initial_control' by changing it to 'Control'.</Issue>
            </Message>
            <Message Id="recursive" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2018-08-15 14:21:23Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error" Path="c:\Users\dcv3016\Documents\Visual Studio 2012\Projects\EDIReader\x12_template\Classes" File="_gen_func.cs" Line="119">Correct the casing of 'recursive' in member name '_gen_func.recursive_reset(Control)' by changing it to 'Recursive'.</Issue>
            </Message>
            <Message Id="reset" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2018-08-15 14:21:23Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error" Path="c:\Users\dcv3016\Documents\Visual Studio 2012\Projects\EDIReader\x12_template\Classes" File="_gen_func.cs" Line="119">Correct the casing of 'reset' in member name '_gen_func.recursive_reset(Control)' by changing it to 'Reset'.</Issue>
            </Message>
            <Message TypeName="IdentifiersShouldNotContainUnderscores" Category="Microsoft.Naming" CheckId="CA1707" Status="Active" Created="2018-08-15 14:21:23Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="95" Level="Error" Path="c:\Users\dcv3016\Documents\Visual Studio 2012\Projects\EDIReader\x12_template\Classes" File="_gen_func.cs" Line="119">Remove the underscores from member name '_gen_func.recursive_reset(Control)'.</Issue>
             <Issue Name="MemberParameter" Certainty="95" Level="Error" Path="c:\Users\dcv3016\Documents\Visual Studio 2012\Projects\EDIReader\x12_template\Classes" File="_gen_func.cs" Line="119">In member '_gen_func.recursive_reset(Control)', remove the underscores from parameter name 'initial_control'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SetFormatByControlType`1(System.Object)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotCastUnnecessarily" Category="Microsoft.Performance" CheckId="CA1800" Status="Active" Created="2018-08-15 14:21:23Z" FixCategory="NonBreaking">
             <Issue Name="Local" Certainty="95" Level="Warning" Path="c:\Users\dcv3016\Documents\Visual Studio 2012\Projects\EDIReader\x12_template\Classes" File="_gen_func.cs" Line="27">'control', a variable, is cast to type 'Control' multiple times in method '_gen_func.SetFormatByControlType&lt;T&gt;(object)'. Cache the result of the 'as' operator or direct cast in order to eliminate the redundant castclass instruction.</Issue>
             <Issue Name="Local" Certainty="95" Level="Warning" Path="c:\Users\dcv3016\Documents\Visual Studio 2012\Projects\EDIReader\x12_template\Classes" File="_gen_func.cs" Line="28">'control', a variable, is cast to type 'Control' multiple times in method '_gen_func.SetFormatByControlType&lt;T&gt;(object)'. Cache the result of the 'as' operator or direct cast in order to eliminate the redundant castclass instruction.</Issue>
             <Issue Name="Local" Certainty="95" Level="Warning" Path="c:\Users\dcv3016\Documents\Visual Studio 2012\Projects\EDIReader\x12_template\Classes" File="_gen_func.cs" Line="31">'control', a variable, is cast to type 'Control' multiple times in method '_gen_func.SetFormatByControlType&lt;T&gt;(object)'. Cache the result of the 'as' operator or direct cast in order to eliminate the redundant castclass instruction.</Issue>
             <Issue Name="Local" Certainty="95" Level="Warning" Path="c:\Users\dcv3016\Documents\Visual Studio 2012\Projects\EDIReader\x12_template\Classes" File="_gen_func.cs" Line="32">'control', a variable, is cast to type 'Control' multiple times in method '_gen_func.SetFormatByControlType&lt;T&gt;(object)'. Cache the result of the 'as' operator or direct cast in order to eliminate the redundant castclass instruction.</Issue>
             <Issue Name="Local" Certainty="95" Level="Warning" Path="c:\Users\dcv3016\Documents\Visual Studio 2012\Projects\EDIReader\x12_template\Classes" File="_gen_func.cs" Line="33">'control', a variable, is cast to type 'Control' multiple times in method '_gen_func.SetFormatByControlType&lt;T&gt;(object)'. Cache the result of the 'as' operator or direct cast in order to eliminate the redundant castclass instruction.</Issue>
             <Issue Name="Local" Certainty="95" Level="Warning" Path="c:\Users\dcv3016\Documents\Visual Studio 2012\Projects\EDIReader\x12_template\Classes" File="_gen_func.cs" Line="36">'control', a variable, is cast to type 'Control' multiple times in method '_gen_func.SetFormatByControlType&lt;T&gt;(object)'. Cache the result of the 'as' operator or direct cast in order to eliminate the redundant castclass instruction.</Issue>
             <Issue Name="Local" Certainty="95" Level="Warning" Path="c:\Users\dcv3016\Documents\Visual Studio 2012\Projects\EDIReader\x12_template\Classes" File="_gen_func.cs" Line="37">'control', a variable, is cast to type 'Control' multiple times in method '_gen_func.SetFormatByControlType&lt;T&gt;(object)'. Cache the result of the 'as' operator or direct cast in order to eliminate the redundant castclass instruction.</Issue>
             <Issue Name="Local" Certainty="95" Level="Warning" Path="c:\Users\dcv3016\Documents\Visual Studio 2012\Projects\EDIReader\x12_template\Classes" File="_gen_func.cs" Line="38">'control', a variable, is cast to type 'Control' multiple times in method '_gen_func.SetFormatByControlType&lt;T&gt;(object)'. Cache the result of the 'as' operator or direct cast in order to eliminate the redundant castclass instruction.</Issue>
            </Message>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2018-08-15 14:21:23Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="c:\Users\dcv3016\Documents\Visual Studio 2012\Projects\EDIReader\x12_template\Classes" File="_gen_func.cs" Line="40">Modify '_gen_func.SetFormatByControlType&lt;T&gt;(object)' to catch a more specific exception than 'object' or rethrow the exception.</Issue>
            </Message>
            <Message TypeName="GenericMethodsShouldProvideTypeParameter" Category="Microsoft.Design" CheckId="CA1004" Status="Active" Created="2018-08-15 14:21:23Z" FixCategory="Breaking">
             <Issue Certainty="75" Level="Warning" Path="c:\Users\dcv3016\Documents\Visual Studio 2012\Projects\EDIReader\x12_template\Classes" File="_gen_func.cs" Line="21">Consider a design where '_gen_func.SetFormatByControlType&lt;T&gt;(object)' doesn't require explicit type parameter 'T' in any call to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#smart_column_resize(System.Windows.Forms.ListView)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="column" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2018-08-15 14:21:23Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error" Path="c:\Users\dcv3016\Documents\Visual Studio 2012\Projects\EDIReader\x12_template\Classes" File="_gen_func.cs" Line="80">Correct the casing of 'column' in member name '_gen_func.smart_column_resize(ListView)' by changing it to 'Column'.</Issue>
            </Message>
            <Message Id="resize" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2018-08-15 14:21:23Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error" Path="c:\Users\dcv3016\Documents\Visual Studio 2012\Projects\EDIReader\x12_template\Classes" File="_gen_func.cs" Line="80">Correct the casing of 'resize' in member name '_gen_func.smart_column_resize(ListView)' by changing it to 'Resize'.</Issue>
            </Message>
            <Message Id="smart" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2018-08-15 14:21:23Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error" Path="c:\Users\dcv3016\Documents\Visual Studio 2012\Projects\EDIReader\x12_template\Classes" File="_gen_func.cs" Line="80">Correct the casing of 'smart' in member name '_gen_func.smart_column_resize(ListView)' by changing it to 'Smart'.</Issue>
            </Message>
            <Message TypeName="IdentifiersShouldNotContainUnderscores" Category="Microsoft.Naming" CheckId="CA1707" Status="Active" Created="2018-08-15 14:21:23Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="95" Level="Error" Path="c:\Users\dcv3016\Documents\Visual Studio 2012\Projects\EDIReader\x12_template\Classes" File="_gen_func.cs" Line="80">Remove the underscores from member name '_gen_func.smart_column_resize(ListView)'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#string_to_num(System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="num" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2018-08-15 14:21:23Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error" Path="c:\Users\dcv3016\Documents\Visual Studio 2012\Projects\EDIReader\x12_template\Classes" File="_gen_func.cs" Line="128">Correct the casing of 'num' in member name '_gen_func.string_to_num(string)' by changing it to 'Num'.</Issue>
            </Message>
            <Message Id="string" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2018-08-15 14:21:23Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error" Path="c:\Users\dcv3016\Documents\Visual Studio 2012\Projects\EDIReader\x12_template\Classes" File="_gen_func.cs" Line="128">Correct the casing of 'string' in member name '_gen_func.string_to_num(string)' by changing it to 'String'.</Issue>
            </Message>
            <Message Id="to" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2018-08-15 14:21:23Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error" Path="c:\Users\dcv3016\Documents\Visual Studio 2012\Projects\EDIReader\x12_template\Classes" File="_gen_func.cs" Line="128">Correct the casing of 'to' in member name '_gen_func.string_to_num(string)' by changing it to 'To'.</Issue>
            </Message>
            <Message Id="num" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2018-08-15 14:21:23Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning" Path="c:\Users\dcv3016\Documents\Visual Studio 2012\Projects\EDIReader\x12_template\Classes" File="_gen_func.cs" Line="128">Correct the spelling of 'num' in member name '_gen_func.string_to_num(string)' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="s" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2018-08-15 14:21:23Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning" Path="c:\Users\dcv3016\Documents\Visual Studio 2012\Projects\EDIReader\x12_template\Classes" File="_gen_func.cs" Line="128">In method '_gen_func.string_to_num(string)', consider providing a more meaningful name than parameter name 's'.</Issue>
            </Message>
            <Message TypeName="IdentifiersShouldNotContainUnderscores" Category="Microsoft.Naming" CheckId="CA1707" Status="Active" Created="2018-08-15 14:21:23Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="95" Level="Error" Path="c:\Users\dcv3016\Documents\Visual Studio 2012\Projects\EDIReader\x12_template\Classes" File="_gen_func.cs" Line="128">Remove the underscores from member name '_gen_func.string_to_num(string)'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="Config" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#ParseColor(System.Collections.Generic.IList`1&lt;System.String&gt;,System.Drawing.Color)" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2018-08-15 14:21:23Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="c:\Users\dcv3016\Documents\Visual Studio 2012\Projects\EDIReader\x12_template\Classes" File="Config.cs" Line="99">Modify 'Config.ParseColor(IList&lt;string&gt;, Color)' to catch a more specific exception than 'object' or rethrow the exception.</Issue>
            </Message>
            <Message Id="System.Int32.Parse(System.String)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2018-08-15 14:21:23Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error" Path="c:\Users\dcv3016\Documents\Visual Studio 2012\Projects\EDIReader\x12_template\Classes" File="Config.cs" Line="98">Because the behavior of 'int.Parse(string)' could vary based on the current user's locale settings, replace this call in 'Config.ParseColor(IList&lt;string&gt;, Color)' with a call to 'int.Parse(string, IFormatProvider)'. If the result of 'int.Parse(string, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error" Path="c:\Users\dcv3016\Documents\Visual Studio 2012\Projects\EDIReader\x12_template\Classes" File="Config.cs" Line="98">Because the behavior of 'int.Parse(string)' could vary based on the current user's locale settings, replace this call in 'Config.ParseColor(IList&lt;string&gt;, Color)' with a call to 'int.Parse(string, IFormatProvider)'. If the result of 'int.Parse(string, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error" Path="c:\Users\dcv3016\Documents\Visual Studio 2012\Projects\EDIReader\x12_template\Classes" File="Config.cs" Line="98">Because the behavior of 'int.Parse(string)' could vary based on the current user's locale settings, replace this call in 'Config.ParseColor(IList&lt;string&gt;, Color)' with a call to 'int.Parse(string, IFormatProvider)'. If the result of 'int.Parse(string, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error" Path="c:\Users\dcv3016\Documents\Visual Studio 2012\Projects\EDIReader\x12_template\Classes" File="Config.cs" Line="98">Because the behavior of 'int.Parse(string)' could vary based on the current user's locale settings, replace this call in 'Config.ParseColor(IList&lt;string&gt;, Color)' with a call to 'int.Parse(string, IFormatProvider)'. If the result of 'int.Parse(string, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="Config+ConfigValues" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="NestedTypesShouldNotBeVisible" Category="Microsoft.Design" CheckId="CA1034" Status="Active" Created="2018-08-15 14:21:23Z" FixCategory="Breaking">
           <Issue Certainty="90" Level="Error">Do not nest type 'Config.ConfigValues'. Alternatively, change its accessibility so that it is not externally visible.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#InfoPanelForgroundColor" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Forground" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2018-08-15 14:21:23Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Forground' in member name 'Config.ConfigValues.InfoPanelForgroundColor' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="Config+EnumSerializationHelper" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="NestedTypesShouldNotBeVisible" Category="Microsoft.Design" CheckId="CA1034" Status="Active" Created="2018-08-15 14:21:23Z" FixCategory="Breaking">
           <Issue Certainty="90" Level="Error">Do not nest type 'Config.EnumSerializationHelper'. Alternatively, change its accessibility so that it is not externally visible.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="Config+FontSerializationHelper" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="NestedTypesShouldNotBeVisible" Category="Microsoft.Design" CheckId="CA1034" Status="Active" Created="2018-08-15 14:21:23Z" FixCategory="Breaking">
           <Issue Certainty="90" Level="Error">Do not nest type 'Config.FontSerializationHelper'. Alternatively, change its accessibility so that it is not externally visible.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#FromString(System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.Byte.Parse(System.String)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2018-08-15 14:21:23Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error" Path="c:\Users\dcv3016\Documents\Visual Studio 2012\Projects\EDIReader\x12_template\Classes" File="Config.cs" Line="155">Because the behavior of 'byte.Parse(string)' could vary based on the current user's locale settings, replace this call in 'Config.FontSerializationHelper.FromString(string)' with a call to 'byte.Parse(string, IFormatProvider)'. If the result of 'byte.Parse(string, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message Id="System.Single.Parse(System.String)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2018-08-15 14:21:23Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error" Path="c:\Users\dcv3016\Documents\Visual Studio 2012\Projects\EDIReader\x12_template\Classes" File="Config.cs" Line="155">Because the behavior of 'float.Parse(string)' could vary based on the current user's locale settings, replace this call in 'Config.FontSerializationHelper.FromString(string)' with a call to 'float.Parse(string, IFormatProvider)'. If the result of 'float.Parse(string, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="ConfigMenu" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#.ctor(System.Action)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Refresh" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2018-08-15 14:21:23Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="c:\Users\dcv3016\Documents\Visual Studio 2012\Projects\EDIReader\x12_template\Forms" File="ConfigMenu.Designer.cs" Line="6">In member 'ConfigMenu.ConfigMenu(Action)', correct the casing of 'Refresh' in parameter name 'RefreshForm' by changing it to 'refresh'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="DoubleBufferedTreeView" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#CreateParams" Kind="Property" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Accessors>
            <Accessor Name="#get_CreateParams()" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
             <Messages>
              <Message TypeName="DoNotIndirectlyExposeMethodsWithLinkDemands" Category="Microsoft.Security" CheckId="CA2122" Status="Active" Created="2018-08-15 14:21:23Z" FixCategory="NonBreaking">
               <Issue Certainty="33" Level="CriticalError" Path="c:\Users\dcv3016\Documents\Visual Studio 2012\Projects\EDIReader\x12_template\Classes" File="DoubleBufferedTreeView.cs" Line="16">'DoubleBufferedTreeView.CreateParams.get()' calls into 'TreeView.CreateParams.get()' which has a LinkDemand. By making this call, 'TreeView.CreateParams.get()' is indirectly exposed to user code. Review the following call stack that might expose a way to circumvent security protection: &#xD;&#xA;   -&gt;'DoubleBufferedTreeView.CreateParams.get()'&#xD;&#xA;   -&gt;'DoubleBufferedTreeView.CreateParams.get()'</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#OnPaint(System.Windows.Forms.PaintEventArgs)" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotIndirectlyExposeMethodsWithLinkDemands" Category="Microsoft.Security" CheckId="CA2122" Status="Active" Created="2018-08-15 14:21:23Z" FixCategory="NonBreaking">
             <Issue Certainty="33" Level="CriticalError" Path="c:\Users\dcv3016\Documents\Visual Studio 2012\Projects\EDIReader\x12_template\Classes" File="DoubleBufferedTreeView.cs" Line="28">'DoubleBufferedTreeView.OnPaint(PaintEventArgs)' calls into 'Control.DefWndProc(ref Message)' which has a LinkDemand. By making this call, 'Control.DefWndProc(ref Message)' is indirectly exposed to user code. Review the following call stack that might expose a way to circumvent security protection: &#xD;&#xA;   -&gt;'DoubleBufferedTreeView.OnPaint(PaintEventArgs)'&#xD;&#xA;   -&gt;'DoubleBufferedTreeView.OnPaint(PaintEventArgs)'</Issue>
             <Issue Certainty="33" Level="CriticalError" Path="c:\Users\dcv3016\Documents\Visual Studio 2012\Projects\EDIReader\x12_template\Classes" File="DoubleBufferedTreeView.cs" Line="28">'DoubleBufferedTreeView.OnPaint(PaintEventArgs)' calls into 'Graphics.GetHdc()' which has a LinkDemand. By making this call, 'Graphics.GetHdc()' is indirectly exposed to user code. Review the following call stack that might expose a way to circumvent security protection: &#xD;&#xA;   -&gt;'DoubleBufferedTreeView.OnPaint(PaintEventArgs)'&#xD;&#xA;   -&gt;'DoubleBufferedTreeView.OnPaint(PaintEventArgs)'</Issue>
             <Issue Certainty="33" Level="CriticalError" Path="c:\Users\dcv3016\Documents\Visual Studio 2012\Projects\EDIReader\x12_template\Classes" File="DoubleBufferedTreeView.cs" Line="28">'DoubleBufferedTreeView.OnPaint(PaintEventArgs)' calls into 'Message.HWnd.set(IntPtr)' which has a LinkDemand. By making this call, 'Message.HWnd.set(IntPtr)' is indirectly exposed to user code. Review the following call stack that might expose a way to circumvent security protection: &#xD;&#xA;   -&gt;'DoubleBufferedTreeView.OnPaint(PaintEventArgs)'&#xD;&#xA;   -&gt;'DoubleBufferedTreeView.OnPaint(PaintEventArgs)'</Issue>
             <Issue Certainty="33" Level="CriticalError" Path="c:\Users\dcv3016\Documents\Visual Studio 2012\Projects\EDIReader\x12_template\Classes" File="DoubleBufferedTreeView.cs" Line="28">'DoubleBufferedTreeView.OnPaint(PaintEventArgs)' calls into 'Message.LParam.set(IntPtr)' which has a LinkDemand. By making this call, 'Message.LParam.set(IntPtr)' is indirectly exposed to user code. Review the following call stack that might expose a way to circumvent security protection: &#xD;&#xA;   -&gt;'DoubleBufferedTreeView.OnPaint(PaintEventArgs)'&#xD;&#xA;   -&gt;'DoubleBufferedTreeView.OnPaint(PaintEventArgs)'</Issue>
             <Issue Certainty="33" Level="CriticalError" Path="c:\Users\dcv3016\Documents\Visual Studio 2012\Projects\EDIReader\x12_template\Classes" File="DoubleBufferedTreeView.cs" Line="28">'DoubleBufferedTreeView.OnPaint(PaintEventArgs)' calls into 'Message.Msg.set(int)' which has a LinkDemand. By making this call, 'Message.Msg.set(int)' is indirectly exposed to user code. Review the following call stack that might expose a way to circumvent security protection: &#xD;&#xA;   -&gt;'DoubleBufferedTreeView.OnPaint(PaintEventArgs)'&#xD;&#xA;   -&gt;'DoubleBufferedTreeView.OnPaint(PaintEventArgs)'</Issue>
             <Issue Certainty="33" Level="CriticalError" Path="c:\Users\dcv3016\Documents\Visual Studio 2012\Projects\EDIReader\x12_template\Classes" File="DoubleBufferedTreeView.cs" Line="28">'DoubleBufferedTreeView.OnPaint(PaintEventArgs)' calls into 'Message.WParam.get()' which has a LinkDemand. By making this call, 'Message.WParam.get()' is indirectly exposed to user code. Review the following call stack that might expose a way to circumvent security protection: &#xD;&#xA;   -&gt;'DoubleBufferedTreeView.OnPaint(PaintEventArgs)'&#xD;&#xA;   -&gt;'DoubleBufferedTreeView.OnPaint(PaintEventArgs)'</Issue>
             <Issue Certainty="33" Level="CriticalError" Path="c:\Users\dcv3016\Documents\Visual Studio 2012\Projects\EDIReader\x12_template\Classes" File="DoubleBufferedTreeView.cs" Line="28">'DoubleBufferedTreeView.OnPaint(PaintEventArgs)' calls into 'Message.WParam.set(IntPtr)' which has a LinkDemand. By making this call, 'Message.WParam.set(IntPtr)' is indirectly exposed to user code. Review the following call stack that might expose a way to circumvent security protection: &#xD;&#xA;   -&gt;'DoubleBufferedTreeView.OnPaint(PaintEventArgs)'&#xD;&#xA;   -&gt;'DoubleBufferedTreeView.OnPaint(PaintEventArgs)'</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="GLOBALS" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="GLOBALS" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2018-08-15 14:21:23Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="85" Level="Error">Correct the casing of 'GLOBALS' in type name 'GLOBALS' by changing it to 'Globals'.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#Config" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="NonConstantFieldsShouldNotBeVisible" Category="Microsoft.Usage" CheckId="CA2211" Status="Active" Created="2018-08-15 14:21:23Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Warning">Consider making 'GLOBALS.Config' non-public or a constant.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="Main" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#DisplayX12()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2018-08-15 14:21:23Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="c:\Users\dcv3016\Documents\Visual Studio 2012\Projects\EDIReader\x12_template\Forms" File="Main.cs" Line="213">Modify 'Main.DisplayX12()' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ElementDef(System.String,System.Int32)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Element" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2018-08-15 14:21:23Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="c:\Users\dcv3016\Documents\Visual Studio 2012\Projects\EDIReader\x12_template\Forms" File="Main.cs" Line="65">In member 'Main.ElementDef(string, int)', correct the casing of 'Element' in parameter name 'ElementNum' by changing it to 'element'.</Issue>
            </Message>
            <Message Id="ID" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2018-08-15 14:21:23Z" FixCategory="Breaking">
             <Issue Name="MemberParameterAbbreviation" Certainty="85" Level="Error" Path="c:\Users\dcv3016\Documents\Visual Studio 2012\Projects\EDIReader\x12_template\Forms" File="Main.cs" Line="65">In member 'Main.ElementDef(string, int)', correct the casing of 'ID' in parameter name 'SegmentID' by changing it to 'Id'. 'Id' is an abbreviation and therefore is not subject to acronym casing guidelines.</Issue>
            </Message>
            <Message Id="Segment" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2018-08-15 14:21:23Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="c:\Users\dcv3016\Documents\Visual Studio 2012\Projects\EDIReader\x12_template\Forms" File="Main.cs" Line="65">In member 'Main.ElementDef(string, int)', correct the casing of 'Segment' in parameter name 'SegmentID' by changing it to 'segment'.</Issue>
            </Message>
            <Message Id="Num" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2018-08-15 14:21:23Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="c:\Users\dcv3016\Documents\Visual Studio 2012\Projects\EDIReader\x12_template\Forms" File="Main.cs" Line="65">In method 'Main.ElementDef(string, int)', correct the spelling of 'Num' in parameter name 'ElementNum' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ReadFormatFile()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="SpecifyMessageBoxOptions" Category="Microsoft.Globalization" CheckId="CA1300" Status="Active" Created="2018-08-15 14:21:23Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="c:\Users\dcv3016\Documents\Visual Studio 2012\Projects\EDIReader\x12_template\Forms" File="Main.cs" Line="186">Change 'Main.ReadFormatFile()' to call the MessageBox.Show overload that specifies MessageBoxOptions, and make sure to set MessageBoxOptions.RightAlign and MessageBoxOptions.RtlReading if RightToLeft is set to RightToLeft.Yes on the parent control.</Issue>
             <Issue Certainty="95" Level="Error" Path="c:\Users\dcv3016\Documents\Visual Studio 2012\Projects\EDIReader\x12_template\Forms" File="Main.cs" Line="190">Change 'Main.ReadFormatFile()' to call the MessageBox.Show overload that specifies MessageBoxOptions, and make sure to set MessageBoxOptions.RightAlign and MessageBoxOptions.RtlReading if RightToLeft is set to RightToLeft.Yes on the parent control.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#searchToolStripMenuItem1_Click(System.Object,System.EventArgs)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="System.Int32.ToString" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2018-08-15 14:21:23Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="c:\Users\dcv3016\Documents\Visual Studio 2012\Projects\EDIReader\x12_template\Forms" File="Main.cs" Line="566">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'Main.searchToolStripMenuItem1_Click(object, EventArgs)' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="c:\Users\dcv3016\Documents\Visual Studio 2012\Projects\EDIReader\x12_template\Forms" File="Main.cs" Line="606">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'Main.searchToolStripMenuItem1_Click(object, EventArgs)' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="c:\Users\dcv3016\Documents\Visual Studio 2012\Projects\EDIReader\x12_template\Forms" File="Main.cs" Line="618">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'Main.searchToolStripMenuItem1_Click(object, EventArgs)' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="c:\Users\dcv3016\Documents\Visual Studio 2012\Projects\EDIReader\x12_template\Forms" File="Main.cs" Line="630">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'Main.searchToolStripMenuItem1_Click(object, EventArgs)' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ShowNodeMatchingSegment(System.Windows.Forms.TreeNodeCollection,EDIReader.X12.Segment)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="s" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2018-08-15 14:21:23Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning" Path="c:\Users\dcv3016\Documents\Visual Studio 2012\Projects\EDIReader\x12_template\Forms" File="Main.cs" Line="78">In method 'Main.ShowNodeMatchingSegment(TreeNodeCollection, Segment)', consider providing a more meaningful name than parameter name 's'.</Issue>
            </Message>
            <Message Id="t" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2018-08-15 14:21:23Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning" Path="c:\Users\dcv3016\Documents\Visual Studio 2012\Projects\EDIReader\x12_template\Forms" File="Main.cs" Line="78">In method 'Main.ShowNodeMatchingSegment(TreeNodeCollection, Segment)', consider providing a more meaningful name than parameter name 't'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#x12View_DrawNode(System.Object,System.Windows.Forms.DrawTreeNodeEventArgs)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="System.Int64.ToString" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2018-08-15 14:21:23Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="c:\Users\dcv3016\Documents\Visual Studio 2012\Projects\EDIReader\x12_template\Forms" File="Main.cs" Line="432">Because the behavior of 'long.ToString()' could vary based on the current user's locale settings, replace this call in 'Main.x12View_DrawNode(object, DrawTreeNodeEventArgs)' with a call to 'long.ToString(IFormatProvider)'. If the result of 'long.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message TypeName="TestForEmptyStringsUsingStringLength" Category="Microsoft.Performance" CheckId="CA1820" Status="Active" Created="2018-08-15 14:21:23Z" FixCategory="NonBreaking">
             <Issue Name="IsNullOrEmpty" Certainty="95" Level="Warning" Path="c:\Users\dcv3016\Documents\Visual Studio 2012\Projects\EDIReader\x12_template\Forms" File="Main.cs" Line="432">Replace the call to 'string.operator !=(string, string)' in 'Main.x12View_DrawNode(object, DrawTreeNodeEventArgs)' with a call to 'String.IsNullOrEmpty'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="ReplaceDialog" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#.ctor(EDIReader.X12.x12File)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="x" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2018-08-15 14:21:23Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="c:\Users\dcv3016\Documents\Visual Studio 2012\Projects\EDIReader\x12_template\Forms" File="ReplaceDialog.cs" Line="13">In method 'ReplaceDialog.ReplaceDialog(x12File)', correct the spelling of 'x' in parameter name 'x12File' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#findOrReplace(System.Boolean)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="SpecifyMessageBoxOptions" Category="Microsoft.Globalization" CheckId="CA1300" Status="Active" Created="2018-08-15 14:21:23Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="c:\Users\dcv3016\Documents\Visual Studio 2012\Projects\EDIReader\x12_template\Forms" File="ReplaceDialog.cs" Line="97">Change 'ReplaceDialog.findOrReplace(bool)' to call the MessageBox.Show overload that specifies MessageBoxOptions, and make sure to set MessageBoxOptions.RightAlign and MessageBoxOptions.RtlReading if RightToLeft is set to RightToLeft.Yes on the parent control.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#regexFilterTxt_TextChanged(System.Object,System.EventArgs)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2018-08-15 14:21:23Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="c:\Users\dcv3016\Documents\Visual Studio 2012\Projects\EDIReader\x12_template\Forms" File="ReplaceDialog.cs" Line="126">Modify 'ReplaceDialog.regexFilterTxt_TextChanged(object, EventArgs)' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
            </Message>
            <Message Id="r" TypeName="RemoveUnusedLocals" Category="Microsoft.Performance" CheckId="CA1804" Status="Active" Created="2018-08-15 14:21:23Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="c:\Users\dcv3016\Documents\Visual Studio 2012\Projects\EDIReader\x12_template\Forms" File="ReplaceDialog.cs" Line="125">'ReplaceDialog.regexFilterTxt_TextChanged(object, EventArgs)' declares a variable, 'r', of type 'Regex', which is never used or is only assigned to. Use this variable or remove it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#runFaker(System.String)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2018-08-15 14:21:23Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="c:\Users\dcv3016\Documents\Visual Studio 2012\Projects\EDIReader\x12_template\Forms" File="ReplaceDialog.cs" Line="200">The 'this' parameter (or 'Me' in Visual Basic) of 'ReplaceDialog.runFaker(string)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SegmentToLVI(EDIReader.X12.Segment)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2018-08-15 14:21:23Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="c:\Users\dcv3016\Documents\Visual Studio 2012\Projects\EDIReader\x12_template\Forms" File="ReplaceDialog.cs" Line="208">The 'this' parameter (or 'Me' in Visual Basic) of 'ReplaceDialog.SegmentToLVI(Segment)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
            <Message Id="System.Int64.ToString" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2018-08-15 14:21:23Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="c:\Users\dcv3016\Documents\Visual Studio 2012\Projects\EDIReader\x12_template\Forms" File="ReplaceDialog.cs" Line="209">Because the behavior of 'long.ToString()' could vary based on the current user's locale settings, replace this call in 'ReplaceDialog.SegmentToLVI(Segment)' with a call to 'long.ToString(IFormatProvider)'. If the result of 'long.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message TypeName="TestForEmptyStringsUsingStringLength" Category="Microsoft.Performance" CheckId="CA1820" Status="Active" Created="2018-08-15 14:21:23Z" FixCategory="NonBreaking">
             <Issue Name="IsNullOrEmpty" Certainty="95" Level="Warning" Path="c:\Users\dcv3016\Documents\Visual Studio 2012\Projects\EDIReader\x12_template\Forms" File="ReplaceDialog.cs" Line="210">Replace the call to 'string.operator !=(string, string)' in 'ReplaceDialog.SegmentToLVI(Segment)' with a call to 'String.IsNullOrEmpty'.</Issue>
             <Issue Name="IsNullOrEmpty" Certainty="95" Level="Warning" Path="c:\Users\dcv3016\Documents\Visual Studio 2012\Projects\EDIReader\x12_template\Forms" File="ReplaceDialog.cs" Line="212">Replace the call to 'string.operator !=(string, string)' in 'ReplaceDialog.SegmentToLVI(Segment)' with a call to 'String.IsNullOrEmpty'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="ReplaceDialog+Person" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="NestedTypesShouldNotBeVisible" Category="Microsoft.Design" CheckId="CA1034" Status="Active" Created="2018-08-15 14:21:23Z" FixCategory="Breaking">
           <Issue Certainty="90" Level="Error">Do not nest type 'ReplaceDialog.Person'. Alternatively, change its accessibility so that it is not externally visible.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#.ctor()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.DateTime.ToString(System.String)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2018-08-15 14:21:23Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="c:\Users\dcv3016\Documents\Visual Studio 2012\Projects\EDIReader\x12_template\Forms" File="ReplaceDialog.cs" Line="260">Because the behavior of 'DateTime.ToString(string)' could vary based on the current user's locale settings, replace this call in 'ReplaceDialog.Person.Person()' with a call to 'DateTime.ToString(string, IFormatProvider)'. If the result of 'DateTime.ToString(string, IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Address" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2018-08-15 14:21:23Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'ReplaceDialog.Person.Address' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#AlphaNumeric" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="AlphaNumeric" TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702" Status="Active" Created="2018-08-15 14:21:23Z" FixCategory="Breaking">
             <Issue Name="MemberShouldBeDiscreteTerm" Certainty="80" Level="Error">The compound word 'AlphaNumeric' in member name 'ReplaceDialog.Person.AlphaNumeric' exists as a discrete term. If your usage is intended to be single word, case it as 'Alphanumeric' or strip the first token entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2018-08-15 14:21:23Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'ReplaceDialog.Person.AlphaNumeric' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#City" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2018-08-15 14:21:23Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'ReplaceDialog.Person.City' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#DOB" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2018-08-15 14:21:23Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'ReplaceDialog.Person.DOB' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#FirstName" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2018-08-15 14:21:23Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'ReplaceDialog.Person.FirstName' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#LastName" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2018-08-15 14:21:23Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'ReplaceDialog.Person.LastName' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#MI" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2018-08-15 14:21:23Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'ReplaceDialog.Person.MI' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Numeric" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2018-08-15 14:21:23Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'ReplaceDialog.Person.Numeric' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#PatientID" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2018-08-15 14:21:23Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'ReplaceDialog.Person.PatientID' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#RID" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2018-08-15 14:21:23Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'ReplaceDialog.Person.RID' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SSN" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2018-08-15 14:21:23Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'ReplaceDialog.Person.SSN' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#State" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2018-08-15 14:21:23Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'ReplaceDialog.Person.State' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Zip" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2018-08-15 14:21:23Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'ReplaceDialog.Person.Zip' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="ReplaceDialog+SegmentDef" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="NestedTypesShouldNotBeVisible" Category="Microsoft.Design" CheckId="CA1034" Status="Active" Created="2018-08-15 14:21:23Z" FixCategory="Breaking">
           <Issue Certainty="90" Level="Error">Do not nest type 'ReplaceDialog.SegmentDef'. Alternatively, change its accessibility so that it is not externally visible.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#.ctor(System.String,System.String[])" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="IDs" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2018-08-15 14:21:23Z" FixCategory="Breaking">
             <Issue Name="MemberParameterAbbreviation" Certainty="85" Level="Error" Path="c:\Users\dcv3016\Documents\Visual Studio 2012\Projects\EDIReader\x12_template\Forms" File="ReplaceDialog.cs" Line="276">In member 'ReplaceDialog.SegmentDef.SegmentDef(string, string[])', correct the casing of 'IDs' in parameter name 'SecondaryIDs' by changing it to 'Ids'. 'Ids' is an abbreviation and therefore is not subject to acronym casing guidelines.</Issue>
            </Message>
            <Message Id="Secondary" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2018-08-15 14:21:23Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="c:\Users\dcv3016\Documents\Visual Studio 2012\Projects\EDIReader\x12_template\Forms" File="ReplaceDialog.cs" Line="276">In member 'ReplaceDialog.SegmentDef.SegmentDef(string, string[])', correct the casing of 'Secondary' in parameter name 'SecondaryIDs' by changing it to 'secondary'.</Issue>
            </Message>
            <Message Id="Text" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2018-08-15 14:21:23Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="c:\Users\dcv3016\Documents\Visual Studio 2012\Projects\EDIReader\x12_template\Forms" File="ReplaceDialog.cs" Line="276">In member 'ReplaceDialog.SegmentDef.SegmentDef(string, string[])', correct the casing of 'Text' in parameter name 'Text' by changing it to 'text'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SecondaryIDs" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="CollectionPropertiesShouldBeReadOnly" Category="Microsoft.Usage" CheckId="CA2227" Status="Active" Created="2018-08-15 14:21:23Z" FixCategory="Breaking">
             <Issue Certainty="75" Level="Warning">Change 'ReplaceDialog.SegmentDef.SecondaryIDs' to be read-only by removing the property setter.</Issue>
            </Message>
            <Message TypeName="DoNotExposeGenericLists" Category="Microsoft.Design" CheckId="CA1002" Status="Active" Created="2018-08-15 14:21:23Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error">Change 'List&lt;string&gt;' in 'ReplaceDialog.SegmentDef.SecondaryIDs' to use Collection&lt;T&gt;, ReadOnlyCollection&lt;T&gt; or KeyedCollection&lt;K,V&gt;</Issue>
            </Message>
            <Message Id="IDs" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2018-08-15 14:21:23Z" FixCategory="Breaking">
             <Issue Name="MemberAbbreviation" Certainty="85" Level="Error">Correct the casing of 'IDs' in member name 'ReplaceDialog.SegmentDef.SecondaryIDs' by changing it to 'Ids'. 'Ids' is an abbreviation and therefore is not subject to acronym casing guidelines.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="ReplaceDialog+SegmentType" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="NestedTypesShouldNotBeVisible" Category="Microsoft.Design" CheckId="CA1034" Status="Active" Created="2018-08-15 14:21:23Z" FixCategory="Breaking">
           <Issue Certainty="90" Level="Error">Do not nest type 'ReplaceDialog.SegmentType'. Alternatively, change its accessibility so that it is not externally visible.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#.ctor(System.String,EDIReader.X12.Segment)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Text" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2018-08-15 14:21:23Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="c:\Users\dcv3016\Documents\Visual Studio 2012\Projects\EDIReader\x12_template\Forms" File="ReplaceDialog.cs" Line="292">In member 'ReplaceDialog.SegmentType.SegmentType(string, Segment)', correct the casing of 'Text' in parameter name 'Text' by changing it to 'text'.</Issue>
            </Message>
            <Message Id="Value" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2018-08-15 14:21:23Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="c:\Users\dcv3016\Documents\Visual Studio 2012\Projects\EDIReader\x12_template\Forms" File="ReplaceDialog.cs" Line="292">In member 'ReplaceDialog.SegmentType.SegmentType(string, Segment)', correct the casing of 'Value' in parameter name 'Value' by changing it to 'value'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SecondaryIDs" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="CollectionPropertiesShouldBeReadOnly" Category="Microsoft.Usage" CheckId="CA2227" Status="Active" Created="2018-08-15 14:21:23Z" FixCategory="Breaking">
             <Issue Certainty="75" Level="Warning">Change 'ReplaceDialog.SegmentType.SecondaryIDs' to be read-only by removing the property setter.</Issue>
            </Message>
            <Message TypeName="DoNotExposeGenericLists" Category="Microsoft.Design" CheckId="CA1002" Status="Active" Created="2018-08-15 14:21:23Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error">Change 'List&lt;string&gt;' in 'ReplaceDialog.SegmentType.SecondaryIDs' to use Collection&lt;T&gt;, ReadOnlyCollection&lt;T&gt; or KeyedCollection&lt;K,V&gt;</Issue>
            </Message>
            <Message Id="IDs" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2018-08-15 14:21:23Z" FixCategory="Breaking">
             <Issue Name="MemberAbbreviation" Certainty="85" Level="Error">Correct the casing of 'IDs' in member name 'ReplaceDialog.SegmentType.SecondaryIDs' by changing it to 'Ids'. 'Ids' is an abbreviation and therefore is not subject to acronym casing guidelines.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
     </Namespaces>
    </Module>
   </Modules>
  </Target>
 </Targets>
 <Rules>
  <Rule TypeName="AssembliesShouldHaveValidStrongNames" Category="Microsoft.Design" CheckId="CA2210">
   <Name>Assemblies should have valid strong names</Name>
   <Description>Either the assembly has no strong name, an invalid one, or the strong name is valid only because of the computer configuration. The assembly should not be deployed in this state. The most common causes of this are: 1) The assembly's contents were modified after it was signed. 2) The signing process failed. 3) The assembly was delay-signed. 4) A registry key existed that allowed the check to pass (where it would not have otherwise).</Description>
   <Resolution Name="NoStrongName">Sign {0} with a strong name key.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182127(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">CriticalError</MessageLevel>
   <File Name="designrules.dll" Version="10.0.0.0" />
  </Rule>
  <Rule TypeName="CollectionPropertiesShouldBeReadOnly" Category="Microsoft.Usage" CheckId="CA2227">
   <Name>Collection properties should be read only</Name>
   <Description>Properties that return collections should be read-only so that users cannot entirely replace the backing store. Users can still modify the contents of the collection by calling relevant methods on the collection. Note that the XmlSerializer class has special support for deserializing read-only collections. See the XmlSerializer overview for more information.</Description>
   <Resolution Name="Default">Change {0} to be read-only by removing the property setter.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182327(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="75">Warning</MessageLevel>
   <File Name="usagerules.dll" Version="10.0.0.0" />
  </Rule>
  <Rule TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702">
   <Name>Compound words should be cased correctly</Name>
   <Description>Avoid creating compound words from terms which exist in the dictionary as discrete terms. Do not create a compound word such as 'StopWatch' or 'PopUp'. These terms are recognized in the dictionary and should be cased as 'Stopwatch' and 'Popup'.</Description>
   <Resolution Name="MemberShouldBeDiscreteTerm">The compound word '{0}' in member name {1} exists as a discrete term. If your usage is intended to be single word, case it as '{2}' or strip the first token entirely if it represents any sort of Hungarian notation.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/bb264474(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="80">Error</MessageLevel>
   <File Name="namingrules.dll" Version="10.0.0.0" />
  </Rule>
  <Rule TypeName="DoNotCastUnnecessarily" Category="Microsoft.Performance" CheckId="CA1800">
   <Name>Do not cast unnecessarily</Name>
   <Description>Avoid duplicate casts where possible, since there is a cost associated with them.</Description>
   <Resolution Name="Local">{0}, a variable, is cast to type {1} multiple times in method {2}. Cache the result of the 'as' operator or direct cast in order to eliminate the redundant {3} instruction.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182271(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Warning</MessageLevel>
   <File Name="performancerules.dll" Version="10.0.0.0" />
  </Rule>
  <Rule TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031">
   <Name>Do not catch general exception types</Name>
   <Description>You should not catch Exception or SystemException. Catching generic exception types can hide run-time problems from the library user, and can complicate debugging. You should catch only those exceptions that you can handle gracefully.</Description>
   <Resolution Name="Default">Modify {0} to catch a more specific exception than {1} or rethrow the exception.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182137(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">CriticalError</MessageLevel>
   <File Name="designrules.dll" Version="10.0.0.0" />
  </Rule>
  <Rule TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051">
   <Name>Do not declare visible instance fields</Name>
   <Description>Instance fields that are visible outside of the type that declares them, limit your ability to change the implementation details for those data items. Use properties instead. They do not compromise usability or performance and they do provide flexibility in that they conceal the implementation details of the underlying data.</Description>
   <Resolution Name="Default">Because field {0} is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182141(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="90">Error</MessageLevel>
   <File Name="designrules.dll" Version="10.0.0.0" />
  </Rule>
  <Rule TypeName="DoNotExposeGenericLists" Category="Microsoft.Design" CheckId="CA1002">
   <Name>Do not expose generic lists</Name>
   <Description>Do not expose List&lt;T&gt; in object models. Use Collection&lt;T&gt;, ReadOnlyCollection&lt;T&gt; or KeyedCollection&lt;K,V&gt; instead. List&lt;T&gt; is meant to be used from implementation, not in object model API. List&lt;T&gt; is optimized for performance at the cost of long term versioning. For example, if you return List&lt;T&gt; to the client code, you will not ever be able to receive notifications when client code modifies the collection.</Description>
   <Resolution Name="Default">Change {0} in {1} to use Collection&lt;T&gt;, ReadOnlyCollection&lt;T&gt; or KeyedCollection&lt;K,V&gt;</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182142(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="designrules.dll" Version="10.0.0.0" />
  </Rule>
  <Rule TypeName="DoNotIndirectlyExposeMethodsWithLinkDemands" Category="Microsoft.Security" CheckId="CA2122">
   <Name>Do not indirectly expose methods with link demands</Name>
   <Description>Do not wrap a method protected by a LinkDemand with a method that does not perform a security check. A LinkDemand checks the permissions of the immediate caller rather than checking the permissions of all callers in the call stack. In this case, the permissions of the wrapper method will be checked. If the wrapper method does not, itself, check the permissions of callers higher in the call stack, malicious code might be able to execute the wrapped function even though it lacks permission to do so.</Description>
   <Resolution Name="Default">{0} calls into {1} which has a LinkDemand. By making this call, {1} is indirectly exposed to user code. Review the following call stack that might expose a way to circumvent security protection: {2}</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182303(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="33">CriticalError</MessageLevel>
   <File Name="securityrules.dll" Version="10.0.0.0" />
  </Rule>
  <Rule TypeName="GenericMethodsShouldProvideTypeParameter" Category="Microsoft.Design" CheckId="CA1004">
   <Name>Generic methods should provide type parameter</Name>
   <Description>Methods where the type parameter cannot be inferred from the parameters and therefore has to be defined in the method call are too difficult to understand. Methods with a formal parameter typed as the generic method type parameter support inference. Methods with no formal parameter typed as the generic method type parameter don't support inference.</Description>
   <Resolution Name="Default">Consider a design where {0} doesn't require explicit type parameter {1} in any call to it.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182150(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="75">Warning</MessageLevel>
   <File Name="designrules.dll" Version="10.0.0.0" />
  </Rule>
  <Rule TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709">
   <Name>Identifiers should be cased correctly</Name>
   <Description>Type, namespace, and member identifiers are Pascal-cased. Parameter identifiers are camel-cased. Two letter acronyms within these identifiers should be upper-cased, for example, use System.IO instead of System.Io. Acronyms of three or more letters should be Pascal-cased, for example, use System.Xml instead of System.XML. The pascal-casing convention capitalizes the first letter of each word, as in BackColor. The camel-casing convention formats the first letter of the first word in lowercase and capitalizes the first letter of all subsequent words, as in backgroundColor. Although it may be common practice for some two letter acronyms to not be fully capitalized, violations of this rule should not be excluded for this reason. For example, 'DbConnection', is common but incorrect; use DBConnection. A violation of this rule might be required for compatibility with existing, non-managed symbol schemes. In general, however, these symbols should not be visible outside the assembly that uses them.</Description>
   <Resolution Name="Member">Correct the casing of '{0}' in member name {1} by changing it to '{2}'.</Resolution>
   <Resolution Name="MemberAbbreviation">Correct the casing of '{0}' in member name {1} by changing it to '{2}'. '{2}' is an abbreviation and therefore is not subject to acronym casing guidelines.</Resolution>
   <Resolution Name="MemberParameter">In member {0}, correct the casing of '{1}' in parameter name {2} by changing it to '{3}'.</Resolution>
   <Resolution Name="MemberParameterAbbreviation">In member {0}, correct the casing of '{1}' in parameter name {2} by changing it to '{3}'. '{3}' is an abbreviation and therefore is not subject to acronym casing guidelines.</Resolution>
   <Resolution Name="Namespace">Correct the casing of '{0}' in namespace name '{1}' by changing it to '{2}'.</Resolution>
   <Resolution Name="Type">Correct the casing of '{0}' in type name {1} by changing it to '{2}'.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182240(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="85">Error</MessageLevel>
   <File Name="namingrules.dll" Version="10.0.0.0" />
  </Rule>
  <Rule TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704">
   <Name>Identifiers should be spelled correctly</Name>
   <Description>The individual words that make up an identifier should not be abbreviated and should be spelled correctly. If this rule generates a false positive on a term that should be recognized, add the word to the FxCop custom dictionary.</Description>
   <Resolution Name="Member">Correct the spelling of '{0}' in member name {1} or remove it entirely if it represents any sort of Hungarian notation.</Resolution>
   <Resolution Name="MemberParameter">In method {0}, correct the spelling of '{1}' in parameter name {2} or remove it entirely if it represents any sort of Hungarian notation.</Resolution>
   <Resolution Name="MemberParameterMoreMeaningfulName">In method {0}, consider providing a more meaningful name than parameter name {1}.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/bb264492(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="75">CriticalWarning</MessageLevel>
   <File Name="namingrules.dll" Version="10.0.0.0" />
  </Rule>
  <Rule TypeName="IdentifiersShouldNotContainUnderscores" Category="Microsoft.Naming" CheckId="CA1707">
   <Name>Identifiers should not contain underscores</Name>
   <Description>Do not use underscores when specifying identifiers. Some generated Visual Studio identifiers for applications contain underscore characters. Underscore characters should generally be avoided in public identifiers.</Description>
   <Resolution Name="Member">Remove the underscores from member name {0}.</Resolution>
   <Resolution Name="MemberParameter">In member {0}, remove the underscores from parameter name {1}.</Resolution>
   <Resolution Name="Type">Remove the underscores from type name {0}.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182245(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="namingrules.dll" Version="10.0.0.0" />
  </Rule>
  <Rule TypeName="MarkAssembliesWithClsCompliant" Category="Microsoft.Design" CheckId="CA1014">
   <Name>Mark assemblies with CLSCompliantAttribute</Name>
   <Description>Assemblies should explicitly state their CLS compliance using the CLSCompliant attribute. An assembly without this attribute is not CLS-compliant. Assemblies, modules, and types can be CLS-compliant even if some parts of the assembly, module, or type are not CLS-compliant. The following rules apply: 1) If the element is marked CLSCompliant, any noncompliant members must have the CLSCompliant attribute present with its argument set to false. 2) A comparable CLS-compliant alternative member must be supplied for each member that is not CLS-compliant.</Description>
   <Resolution Name="Default">Mark {0} with CLSCompliant(true) because it exposes externally visible types.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182156(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="designrules.dll" Version="10.0.0.0" />
  </Rule>
  <Rule TypeName="MarkAssembliesWithNeutralResourcesLanguage" Category="Microsoft.Performance" CheckId="CA1824">
   <Name>Mark assemblies with NeutralResourcesLanguageAttribute</Name>
   <Description>The NeutralResourcesLanguage attribute informs the ResourceManager of the language used to render the neutral culture's resources for an assembly. When looking up resources in the same culture as the neutral resources language, the ResourceManager automatically uses the resources located in the main assembly, instead of searching for a satellite assembly with the current user interface culture for the current thread. This will improve lookup performance for the first resource you load and can reduce your working set.</Description>
   <Resolution Name="Default">Because assembly {0} contains a ResX-based resource file, mark it with the NeutralResourcesLanguage attribute, specifying the language of the resources within the assembly. This could improve lookup performance the first time a resource is retrieved.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/bb385967(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Warning</MessageLevel>
   <File Name="performancerules.dll" Version="10.0.0.0" />
  </Rule>
  <Rule TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822">
   <Name>Mark members as static</Name>
   <Description>Methods which do not access instance data or call instance methods can be marked as static (Shared in Visual Basic). After doing so, the compiler will emit non-virtual call sites to these members which will prevent a check at runtime for each call that ensures the current object pointer is non-null. This can result in a measurable performance gain for performance-sensitive code. In some cases, the failure to access the current object instance represents a correctness issue.</Description>
   <Resolution Name="Default">The 'this' parameter (or 'Me' in Visual Basic) of {0} is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms245046(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Warning</MessageLevel>
   <File Name="performancerules.dll" Version="10.0.0.0" />
  </Rule>
  <Rule TypeName="NestedTypesShouldNotBeVisible" Category="Microsoft.Design" CheckId="CA1034">
   <Name>Nested types should not be visible</Name>
   <Description>Do not use public, protected or protected internal (Protected Friend) nested types as a way of grouping types. Use namespaces for this purpose. There are very limited scenarios where nested types are the best design. Also, nested type member accessibility is not clearly understood by all audiences. Enumerators are exempt from this rule.</Description>
   <Resolution Name="Default">Do not nest type {0}. Alternatively, change its accessibility so that it is not externally visible.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182162(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="90">Error</MessageLevel>
   <File Name="designrules.dll" Version="10.0.0.0" />
  </Rule>
  <Rule TypeName="NonConstantFieldsShouldNotBeVisible" Category="Microsoft.Usage" CheckId="CA2211">
   <Name>Non-constant fields should not be visible</Name>
   <Description>Static fields should be constant unless you carefully manage access to the field using locks. Using static variables without making them thread safe can compromise execution state. This rule applies to managed code libraries. If the analyzed assembly is an application, it is usually safe to exclude violations of this rule.</Description>
   <Resolution Name="Default">Consider making {0} non-public or a constant.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182353(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="90">Warning</MessageLevel>
   <File Name="usagerules.dll" Version="10.0.0.0" />
  </Rule>
  <Rule TypeName="RemoveUnusedLocals" Category="Microsoft.Performance" CheckId="CA1804">
   <Name>Remove unused locals</Name>
   <Description>Remove locals that are not used or are only assigned to in method implementations.</Description>
   <Resolution Name="Default">{0} declares a variable, {1}, of type {2}, which is never used or is only assigned to. Use this variable or remove it.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182278(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Warning</MessageLevel>
   <File Name="performancerules.dll" Version="10.0.0.0" />
  </Rule>
  <Rule TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305">
   <Name>Specify IFormatProvider</Name>
   <Description>If an overload exists that takes an IFormatProvider argument, it should always be called in favor of an overload that does not. Some methods in the runtime convert a value to or from a string representation and take a string parameter that contains one or more characters, called format specifiers, which indicate how the value is to be converted. If the meaning of the format specifier varies by culture, a formatting object supplies the actual characters used in the string representation. In scenarios where sorting and comparison behavior should never change between cultures, specify CultureInfo.InvariantCulture, otherwise, specify CultureInfo.CurrentCulture.</Description>
   <Resolution Name="IFormatProviderAlternate">Because the behavior of {0} could vary based on the current user's locale settings, replace this call in {1} with a call to {2}. If the result of {2} will be based on input from the user, specify {3} as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify {4}.</Resolution>
   <Resolution Name="IFormatProviderAlternateString">Because the behavior of {0} could vary based on the current user's locale settings, replace this call in {1} with a call to {2}. If the result of {2} will be displayed to the user, specify {3} as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify {4}.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182190(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="globalizationrules.dll" Version="10.0.0.0" />
  </Rule>
  <Rule TypeName="SpecifyMessageBoxOptions" Category="Microsoft.Globalization" CheckId="CA1300">
   <Name>Specify MessageBoxOptions</Name>
   <Description>In order to run correctly on right-to-left systems, all calls to MessageBox.Show should use the overload that specifies MessageBoxOptions as an argument. Programs should detect whether they are running on a right-to-left system at run-time and pass the appropriate MessageBoxOptions value in order to display correctly.</Description>
   <Resolution Name="Default">Change {0} to call the MessageBox.Show overload that specifies MessageBoxOptions, and make sure to set MessageBoxOptions.RightAlign and MessageBoxOptions.RtlReading if RightToLeft is set to RightToLeft.Yes on the parent control.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182191(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="globalizationrules.dll" Version="10.0.0.0" />
  </Rule>
  <Rule TypeName="TestForEmptyStringsUsingStringLength" Category="Microsoft.Performance" CheckId="CA1820">
   <Name>Test for empty strings using string length</Name>
   <Description>To test for empty strings, check if String.Length is equal to zero. Constructs such as "".Equals(someString) and String.Empty.Equals(someString) are less efficient than testing the string length. Replace these with checks for someString.Length == 0.</Description>
   <Resolution Name="IsNullOrEmpty">Replace the call to {0} in {1} with a call to 'String.IsNullOrEmpty'.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182279(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Warning</MessageLevel>
   <File Name="performancerules.dll" Version="10.0.0.0" />
  </Rule>
 </Rules>
 <Localized>
  <String Key="Category">Category</String>
  <String Key="Certainty">Certainty</String>
  <String Key="CollapseAll">Collapse All</String>
  <String Key="CheckId">Check Id</String>
  <String Key="Error">Error</String>
  <String Key="Errors">error(s)</String>
  <String Key="ExpandAll">Expand All</String>
  <String Key="Help">Help</String>
  <String Key="Line">Line</String>
  <String Key="Messages">message(s)</String>
  <String Key="LocationNotStoredInPdb">[Location not stored in Pdb]</String>
  <String Key="Project">Project</String>
  <String Key="Resolution">Resolution</String>
  <String Key="Rule">Rule</String>
  <String Key="RuleFile">Rule File</String>
  <String Key="RuleDescription">Rule Description</String>
  <String Key="Source">Source</String>
  <String Key="Status">Status</String>
  <String Key="Target">Target</String>
  <String Key="Warning">Warning</String>
  <String Key="Warnings">warning(s)</String>
  <String Key="ReportTitle">Code Analysis Report</String>
 </Localized>
</FxCopReport>
